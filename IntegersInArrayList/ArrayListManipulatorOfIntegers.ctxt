#BlueJ class context
comment0.params=
comment0.target=ArrayListManipulatorOfIntegers()
comment0.text=\n\ Constructs\ objects\ of\ class\ ArrayListManipulatorOfIntegers.\n
comment1.params=
comment1.target=java.util.ArrayList\ generateRandomData()
comment1.text=\n\ Generates\ random\ numbers\ between\ -500\ and\ 500.\n\ The\ number\ of\ random\ numbers\ is\ itself\ a\ random\ number\n\ between\ 0\ and\ 20.\n\ \n\ @return\ an\ ArrayList\ of\ random\ numbers\n
comment10.params=seriesOfNums
comment10.target=void\ setAbsolute(java.util.ArrayList)
comment10.text=\n\ Turns\ all\ Integer\ values\ to\ their\ absolute\ values\ in\ an\ ArrayList.\n\ \n\ @param\ \ seriesOfNums\ \ \ an\ ArrayList\ of\ Integers\n
comment11.params=seriesOfNumbers
comment11.target=void\ removeOdds(java.util.ArrayList)
comment11.text=\n\ Removes\ all\ odd\ Integer\ values\ from\ an\ ArrayList.\n\ \n\ @param\ \ seriesOfNumbers\ \ \ an\ ArrayList\ of\ Integers\n
comment12.params=quantities
comment12.target=void\ removeAllButOneNeighboringDuplicates(java.util.ArrayList)
comment12.text=\n\ Removes\ all\ but\ one\ duplicate,\ contiguous\ Integer\ values\ from\ \n\ an\ ArrayList.\ \ If\ the\ same\ value\ is\ repeated\ in\ three\ contiguous\n\ positions,\ only\ one\ of\ the\ values\ remains.\ \ Likewise,\ if\ the\n\ same\ value\ is\ repeated\ in\ "n"\ contigous\ positions,\ only\n\ one\ of\ the\ values\ remains.\n\ \n\ @param\ \ quantities\ \ \ an\ ArrayList\ of\ Integers\n\ @postcondition\ \ \ If\ "n"\ identical\ neighboring\ values\ in\ the\ \ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ArrayList,\ "n-1"\ of\ them\ are\ removed\n
comment13.params=quans
comment13.target=void\ doubleUp(java.util.ArrayList)
comment13.text=\n\ Duplicates\ all\ Integer\ values\ that\ are\ a\ multiple\ of\ three\n\ in\ an\ ArrayList.\ \ If\ the\ multiple\ of\ three\ is\ at\ "n"\n\ position,\ that\ value\ is\ now\ at\ both\ position\ "n"\n\ and\ "n+1".\n\ \n\ @param\ \ quans\ \ \ an\ ArrayList\ of\ Integers\n\ @postcondition\ \ \ Duplicates\ all\ Integer\ values\ that\ are\ a\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ multiple\ of\ 3\ in\ an\ ArrayList\n
comment14.params=collectionOfNumbers
comment14.target=void\ removeAllNeighboringDuplicates(java.util.ArrayList)
comment14.text=\n\ Removes\ all\ of\ continguous\ Integer\ values\ that\ are\n\ from\ an\ ArrayList.\ \ If\ removing\ of\ values\ creates\n\ continguous\ identical\ values,\ they\ are\ to\ be\n\ removed.\n\ \n\ @param\ \ collectionOfNumbers\ \ \ an\ ArrayList\ of\ Integers\n\ @postcondition\ \ \ All\ of\ neighboring\ Integer\ values\ that\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ are\ the\ same\ are\ removed\ from\ the\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ArrayList\n
comment15.params=
comment15.target=void\ printMenu()
comment15.text=\n\ Prints\ the\ menu\ for\ the\ user\ to\ read.\n
comment16.params=
comment16.target=void\ interactWithUser()
comment16.text=\n\ Allows\ the\ user\ to\ select\ what\ action\ he\ or\ she\ wishes\ to\ \n\ make.\ \ The\ desired\ action\ is\ then\ executed.\n
comment17.params=args
comment17.target=void\ main(java.lang.String[])
comment17.text=\n\ Tests\ the\ code\ for\ ManipulatorOfIntegerArrayList.\ \ The\ code\ is\ designed\n\ to\ build\ skills\ with\ ArrayLists.\n\ \n\ @param\ args\ \ \ information\ passed\ from\ the\ user\ via\ the\ command\ line\n
comment2.params=
comment2.target=java.util.ArrayList\ generateFixedData()
comment2.text=\n\ Generates\ a\ predictable\ sequence\ of\ numbers\ with\ many\n\ identical\ values\ to\ test\ the\ two\ methods\ that\ "remove\ neighboring\ \n\ duplicates".\n\ \n\ @return\ an\ ArrayList\ of\ selected\ numbers\n
comment3.params=
comment3.target=java.util.ArrayList\ generateEmptyArrayList()
comment3.text=\n\ Generates\ an\ empty\ ArrayList.\n\ \n\ @return\ an\ empty\ ArrayList\n
comment4.params=numbers
comment4.target=void\ printData(java.util.ArrayList)
comment4.text=\n\ Outputs\ an\ ArrayList\ of\ Integers.\n\ \n\ @param\ \ numbers\ \ \ an\ ArrayList\ of\ Integers\n
comment5.params=nums
comment5.target=long\ sumOfData(java.util.ArrayList)
comment5.text=\n\ Generates\ a\ summation\ of\ all\ the\ Integers\ in\ an\ ArrayList.\n\ \n\ @param\ \ nums\ \ \ an\ ArrayList\ of\ Integers\n\ @return\ sum\ of\ all\ numbers\ in\ an\ ArrayList\n
comment6.params=numbs
comment6.target=long\ productOfData(java.util.ArrayList)
comment6.text=\n\ Generates\ a\ product\ of\ all\ the\ Integers\ in\ an\ ArrayList.\n\ \n\ @param\ \ numbs\ \ \ an\ ArrayList\ of\ Integers\n\ @return\ product\ of\ all\ numbers\ in\ an\ ArrayList.\ If\ the\n\ \ \ \ \ \ \ \ \ ArrayList\ is\ empty,\ return\ 0\n
comment7.params=values
comment7.target=int\ getMaxOfData(java.util.ArrayList)
comment7.text=\n\ Finds\ the\ maximum\ Integer\ in\ an\ ArrayList.\ If\ the\ ArrayList\ is\n\ empty,\ the\ smallest\ integer\ value\ is\ returned.\n\ \n\ @param\ \ values\ \ \ an\ ArrayList\ of\ Integers\n\ @return\ maximum\ numbers\ in\ an\ ArrayList\n
comment8.params=vals
comment8.target=int\ getMinOfData(java.util.ArrayList)
comment8.text=\n\ Finds\ the\ minimum\ Integer\ in\ an\ ArrayList.\ If\ the\ ArrayList\ is\n\ empty,\ the\ largest\ integer\ value\ is\ returned.\n\ \n\ @param\ \ vals\ \ \ an\ ArrayList\ of\ Integers\n\ @return\ minimum\ numbers\ in\ an\ ArrayList\n
comment9.params=numSeries
comment9.target=void\ replaceEvenWith6(java.util.ArrayList)
comment9.text=\n\ Turns\ all\ even\ Integer\ values\ in\ an\ ArrayList\ to\ the\ value\ of\ 6.\n\ \n\ @param\ \ numSeries\ \ \ ArrayList\ of\ Integers\n
numComments=18
